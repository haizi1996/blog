<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.hailin.blog.dao.UserDao" >
  <resultMap id="BaseResultMap" type="com.hailin.blog.model.User" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="username" property="username" jdbcType="VARCHAR" />
    <result column="name" property="name" jdbcType="VARCHAR" />
    <result column="password" property="password" jdbcType="VARCHAR" />
    <result column="email" property="email" jdbcType="VARCHAR" />
    <result column="imageUrl" property="imageUrl" jdbcType="VARCHAR" />
    <result column="remark" property="remark" jdbcType="VARCHAR" />
    <result column="status" property="status" jdbcType="INTEGER" />
    <result column="userGroup_Id" property="userGroupId" jdbcType="INTEGER" />
    <result column="operator" property="operator" jdbcType="VARCHAR" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="operate_time" property="operateTime" jdbcType="TIMESTAMP" />
    <result column="last_login_time" property="lastLoginTime" jdbcType="TIMESTAMP" />
    <result column="last_modify_password_Time" property="lastModifyPasswordTime" jdbcType="TIMESTAMP" />
    <result column="operate_ip" property="operateIp" jdbcType="VARCHAR" />
  </resultMap>

  <resultMap id="queryResultMap" type="com.hailin.blog.model.User" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="username" property="username" jdbcType="VARCHAR" />
    <result column="name" property="name" jdbcType="VARCHAR" />
    <result column="password" property="password" jdbcType="VARCHAR" />
    <result column="email" property="email" jdbcType="VARCHAR" />
    <result column="imageUrl" property="imageUrl" jdbcType="VARCHAR" />
    <result column="remark" property="remark" jdbcType="VARCHAR" />
    <result column="status" property="status" jdbcType="INTEGER" />
    <result column="userGroup_Id" property="userGroupId" jdbcType="INTEGER" />
    <result column="operator" property="operator" jdbcType="VARCHAR" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="operate_time" property="operateTime" jdbcType="TIMESTAMP" />
    <result column="last_login_time" property="lastLoginTime" jdbcType="TIMESTAMP" />
    <result column="last_modify_password_Time" property="lastModifyPasswordTime" jdbcType="TIMESTAMP" />
    <result column="operate_ip" property="operateIp" jdbcType="VARCHAR" />
    <collection property="roles" ofType="com.hailin.blog.model.Role" >
      <id column="role_id" property="id"  jdbcType="INTEGER"/>
      <result column="role_name" property="name" jdbcType="VARCHAR" />
      <result column="role_type" property="type" jdbcType="INTEGER" />
      <result column="role_status" property="status" jdbcType="INTEGER" />
      <result column="role_seq" property="seq" jdbcType="INTEGER" />
      <result column="role_remark" property="remark" jdbcType="VARCHAR" />
      <result column="role_operator" property="operator" jdbcType="VARCHAR" />
      <result column="role_create_Time" property="createTime" jdbcType="TIMESTAMP" />
      <result column="role_operate_Time" property="operateTime" jdbcType="TIMESTAMP" />
      <result column="role_operate_Ip" property="operateIp" jdbcType="VARCHAR" />

    </collection>
  </resultMap>
  
  
  <sql id="Base_Column_List" >
    id, name , username, password, email , imageurl , status , remark , userGroup_Id , operator , create_time,operate_time , last_login_time , last_modify_password_Time , operate_ip
  </sql>

  <sql id="user_Column_List">
    `user`.id, `user`.name , `user`.username, `user`.password, `user`.email , `user`.imageurl , `user`.status , `user`.remark , `user`.userGroup_Id , `user`.operator , `user`.create_Time, `user`.operate_Time , `user`.last_Login_Time , `user`.last_Modify_Password_Time , `user`.operate_Ip
  </sql>
  <sql id="role_column_List">
    role.id role_id , role.`name` role_name  , role.`type` role_type , role.`status` role_status , role.`seq` role_seq ,  role.`create_time` role_create , role.`operate_time`  role_operate_time , role.`operate_ip` role_operate_ip ,role.`remark` role_mark , role.`operator` role_opterator
  </sql>

  <select id="listUserAndRolesByNameLike" parameterType="java.lang.String" resultMap="queryResultMap">
      SELECT <include refid="user_Column_List" /> , <include refid="role_column_List" />   FROM `user`
    LEFT JOIN `role_user` ON `user`.id = `role_user`.user_id
    LEFT JOIN `role` ON `role_user`.role_id = `role`.id
    <where>
      <if test="name != null and name.length()>0">
        AND `user`.`name` LIKE concat('%' , #{name} , '%')
      </if>
      <if test="status != null">
        AND `user`.status = #{status}
      </if>
    </where>

  </select>

  <update id="removeUser" >
    UPDATE `user` SET status = 0 WHERE  id = #{id} and username = #{username}
  </update>

  <insert id="saveUser" parameterType="user" useGeneratedKeys="true" keyProperty="id">
    INSERT INTO `user` (id ,name , username , password , email , imageUrl
    <if test="operator != null">
      ,operator
    </if>
    <if test="operateIp != null">
      ,operate_ip
    </if>
    ) VALUES (#{id},#{name} , #{username} , #{password} , #{email}, #{imageUrl}
    <if test="operator != null">
      , #{operator}
    </if>
    <if test="operateIp != null">
     , #{operateIp}
    </if>
    )
  </insert>

  <update id="updateUser" parameterType="user" >
      UPDATE `user`
       <set>
         <if test="name != null">
           name=#{name} ,
         </if>
         <if test="password != null">
           password = #{password} ,last_modify_password_Time = now(),
         </if>
         <if test="email != null">
           email = #{email} ,
         </if>
         <if test="imageUrl != null">
           imageUrl = #{imageUrl} ,
         </if>
         <if test="remark != null">
           remark = #{remark},
         </if>
         <if test="operator != null">
           operator = #{operator},
         </if>
         <if test="operateIp != null">
           operate_ip = #{operateIp},
         </if>
         <if test="userGroupId != null">
           userGroup_Id = #{userGroupId},
         </if>
         operate_time = now()
       </set>

    WHERE id = #{id}
  </update>

  <select id="getUserById" resultMap="queryResultMap" parameterType="java.lang.Integer" >
    SELECT <include refid="user_Column_List" /> , <include refid="role_column_List" />   FROM `user`
    LEFT JOIN `role_user` ON `user`.id = `role_user`.user_id
    LEFT JOIN `role` ON `role_user`.role_id = `role`.id
    where `user`.id = #{id,jdbcType=INTEGER}
  </select>

  <update id="removeUsersInBatch" parameterType="java.util.List" >
    UPDATE `user` set status = 0
      where id IN
    <foreach collection="users" separator="," item="userId" open="(" close=")">
      #{userId}
    </foreach>
  </update>
  <select id="listUsersByUsernames" parameterType="java.util.Collection" resultType="user">
    SELECT <include refid="Base_Column_List" /> FROM USER
    <if test="usernames != null and usernames.size() > 0">
      where username IN
      <foreach collection="usernames" open="(" separator="," close=")" item="username">
        #{username}
      </foreach>
    </if>

</select>
  <select id="findByUsername" parameterType="java.lang.String" resultType="user">
    SELECT <include refid="Base_Column_List"/> FROM `user`
    <where>
      <if test="userName != null and userName.length()>0">
        AND username=#{userName}
      </if>
      <if test="status != null">
        AND status = #{status}
      </if>
    </where>
  </select>
  <select id="findUserDetailsByUsername" resultMap="queryResultMap"  >
    SELECT <include refid="user_Column_List" /> , <include refid="role_column_List" />   FROM `user`
    LEFT JOIN `role_user` ON `user`.id = `role_user`.user_id
    LEFT JOIN `role` ON `role_user`.role_id = `role`.id
    <where>
      <if test="userName != null and userName.length()>0">
        AND `user`.`username` =  #{userName}
      </if>
      <if test="status != null">
        AND `user`.status = #{status}
      </if>
    </where>
  </select>


</mapper>